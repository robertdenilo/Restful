<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
      http://www.springframework.org/schema/context  
      http://www.springframework.org/schema/context/spring-context.xsd  
      http://www.springframework.org/schema/mvc  
      http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
      http://www.springframework.org/schema/tx 
      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
    
    
    <context:annotation-config />
   	<context:component-scan base-package="mySpringMVC">
 	    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/> 
	</context:component-scan> 
     <!-- 引入property配置文件 -->  
    <context:property-placeholder location="/WEB-INF/configs/prop/jdbc.properties"/>  
    <!-- 配置数据源 -->
    <bean id="dataSource"
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.mysql.driverClassName}" />
        <property name="url" value="${jdbc.mysql.url}" />
        <property name="username" value="${jdbc.mysql.username}" />
        <property name="password" value="${jdbc.mysql.password}" />
    </bean>

<!--      配置hibernate SessionFactory -->
    <bean id="sessionFactory"
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${jdbc.mysql.dialect}</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hiberante.format_sql">true</prop>
<!--                 <prop key="hibernate.current_session_context_class">thread</prop> -->
            </props>
        </property>
        
        <property name="configLocations">
            <list>
                <value>
                     /WEB-INF/configs/hibernate/hibernate.cfg.xml
                </value>                
            </list>
        </property>
    </bean>

 <!--    事务管理器 -->
 <!--  
1. 在需要事务管理的地方加@Transactional 注解。@Transactional 注解可以被应用于接口定义和接口方法、类定义和类的 public 方法上。
2. @Transactional 注解只能应用到 public 可见度的方法上。 如果你在 protected、private 或者 package-visible 的方法上使用 @Transactional 注解，它也不会报错， 但是这个被注解的方法将不会展示已配置的事务设置。
3. 注意仅仅 @Transactional 注解的出现不足于开启事务行为，它仅仅 是一种元数据。必须在配置文件中使用配置元素，才真正开启了事务行为。
4. 通过 元素的 "proxy-target-class" 属性值来控制是基于接口的还是基于类的代理被创建。如果 "proxy-target-class" 属值被设置为 "true"，那么基于类的代理将起作用（这时需要CGLIB库cglib.jar在CLASSPATH中）。如果 "proxy-target-class" 属值被设置为 "false" 或者这个属性被省略，那么标准的JDK基于接口的代理将起作用。
 -->
 
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
<!--      已经移到了mySpringMVC-servlet.xml下，否则：Could not obtain transaction-synchronized Session for current thread
    <tx:annotation-driven transaction-manager="transactionManager" />
    <tx:annotation-driven proxy-target-class = "true" />   #开启CGLIB动态代理模式 代替java 自带动态代理接口代理, @transactional导致autowire无法正确inject
     -->
    
<!--     事务代理类 -->
   <!--  <bean id="transactionBese"
        class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
        lazy-init="true" abstract="true">
        <property name="transactionManager" ref="transactionManager"></property>
        <property name="transactionAttributes">
            <props>
                <prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="update*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="insert*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="modify*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="delete*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="del*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="get*">PROPAGATION_NEVER</prop>
            </props>
        </property>
    </bean>

    <bean id="userDaoImpl" class="mySpringMVC.DAO.UserDaoImpl"></bean> -->


<!--     Spring Bean 
    <bean id="userDaoImpl" class="mySpringMVC.DAO.UserDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
  
    <bean id="userManageBase" class="mySpringMVC.SERVICE.UserManageImpl">
        <property name="userDaoImpl" ref="userDaoImpl"></property>
    </bean> 
    
    parent为transactionBese，表示支持事务
    <bean id="userManageImpl" parent="transactionBese">
        <property name="target" ref="userManageBase"></property>
    </bean>  -->
</beans>  